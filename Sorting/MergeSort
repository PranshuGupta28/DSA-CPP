#include<iostream>
using namespace std;

void Merge(int*arr,int s,int e){
    int mid=(s+e)/2;
    int len1 = mid-s+1;
    int len2 = e-mid;

    // assume to create array for len1 , len2
    int*Left = new int [len1];
    int*Right = new int [len2];

    //copy values 
    int k=s;
    for (int i=0;i<len1;i++){
    Left[i]=arr[k];
    k++;
    }

    k=mid+1;
    for (int i=0;i<len2;i++){
    Right[i]=arr[k];
    k++;
}
//Merge Logic

    int leftIndex = 0;
    int rightIndex = 0;
    int mainArrayIndex = s;

    while (leftIndex<len1 && rightIndex<len2 ){
        if(Left[leftIndex]<Right[rightIndex]){

            arr[mainArrayIndex]=Left[leftIndex];
            mainArrayIndex++;
            leftIndex++;
        }
        else {
            arr[mainArrayIndex++]=Right[rightIndex++];
        }
    }

  //Copy left overs from Left & right Array
        while (leftIndex<len1){
            arr[mainArrayIndex]=Left[leftIndex];
            mainArrayIndex++;
            leftIndex++;
        } 
         while (rightIndex<len2){
            arr[mainArrayIndex]=Right[rightIndex];
            mainArrayIndex++;
            rightIndex++;
        } 

}

void MergeSort( int*arr , int s, int e){
     //Base case , s=e (single element) , s>e (invaild Element)

    if(s>=e){

        return;
    }
    int mid= (s+e)/2;
// Left Sort
   MergeSort( arr , s , mid);

// Right sort
    MergeSort( arr, mid+1,e);

//Sare element ko ek ek kr ke sort kr do
  Merge(arr,s, e ) ;  

}

int main (){
    int arr[]={5,6,3,3,7,9,8};
    int n = 7;
    int s =0;
    int e =n-1;

// Calling Merge sort 
    MergeSort(arr , s, e);

// Printing Merge sort
for(int i=0;i<n;i++){
    cout<<arr[i]<<" ";
    }
  
      return 0;
}
